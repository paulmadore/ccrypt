.\" $Id: ccrypt.1.in,v 1.4 2001/11/28 11:57:14 selinger Exp $
.TH @NAMEUC@ 1 "@DATE@" "Version @VERSION@" "Encryption"
.SH NAME

@NAME@ \- encrypt and decrypt files and streams 
.SH SYNOPSIS

.nf
.B @NAME@ [\fImode\fP] [\fIoptions\fP] [\fIfile...\fP]
.B @NAMEENCRYPT@ [\fIoptions\fP] [\fIfile...\fP]
.B @NAMEDECRYPT@ [\fIoptions\fP] [\fIfile...\fP]
.B @NAMECAT@ [\fIoptions\fP] \fIfile...\fP
.fi
.SH DESCRIPTION

\fB@NAME@\fP is a utility for encrypting and decrypting files and
streams. It was designed to replace the standard unix \fBcrypt\fP
utility, which is notorious for using a very weak encryption
algorithm.  \fB@NAME@\fP is based on the Rijndael block cipher,
which is the U.S. government's chosen candidate for the Advanced
Encryption Standard (AES, see http://www.nist.gov/aes/). This
cipher is believed to provide very strong security.

Unlike unix \fBcrypt\fP, the algorithm provided by \fB@NAME@\fP is
not symmetric, i.e., one must specify whether to encrypt or
decrypt. The most common way to invoke \fB@NAME@\fP is via the
commands \fB@NAMEENCRYPT@\fP and \fB@NAMEDECRYPT@\fP.

Encryption and decryption depends on a keyword (or key phrase)
supplied by the user. By default, the user is prompted to enter a
keyword from the terminal. Keywords can consist of any number of
characters, and all characters are significant (although \fB@NAME@\fP
internally hashes the key to 256 bits). Longer keywords provide better
security than short ones, since they are less likely to be discovered
by exhaustive search.
.SH MODES

\fB@NAME@\fP can operate in five different modes.  If more than one
mode is specified, the last one specified takes precedence. The
aliases \fB@NAMEENCRYPT@\fP, \fB@NAMEDECRYPT@\fP, and \fB@NAMECAT@\fP
are provided as a convenience; they are equivalent to \fB@NAME@ -e\fP,
\fB@NAME@ -d\fP, and \fB@NAME@ -c\fP, respectively.
.TP 15
.B -e, --encrypt
Encrypt. This is the default mode. If filename arguments are given,
encrypt the files and append the suffix \fB@SUF@\fP to their
names. Otherwise, run as a filter. 
.TP
.B -d, --decrypt
Decrypt. If filename arguments are given, decrypt the files and strip
the suffix \fB@SUF@\fP from the filenames, if present. Otherwise, run
as a filter.
.TP
.B -c, --cat
Decrypt one or more files to standard output. If no filename arguments
are given, decrypt as a filter. Implies \fB-l\fP.
.TP
.B -x, --keychange
Change the key of encrypted data. In this mode, \fB@NAME@\fP prompts
for two passwords: the old one and the new one.  If filename arguments
are given, modify the files. Otherwise, run as a filter.
.TP
.B -u, --unixcrypt
Simulate the old unix crypt command. Note: the cipher used by unix
crypt has been broken and is not secure. Please use this option only
to decrypt existing files.  If filename arguments are given, decrypt
the files to stdout. Otherwise, run as a filter. Note that for the
unix crypt format, there is no easy way to detect whether a given key
matches or not; thus, for safety, this mode does not overwrite files.
.PD
.SH OPTIONS

The following options are supported in addition to the modes described
above:
.TP 15
.B -E \fIvar\fP, --envvar \fIvar\fP
Read the keyword from the environment variable 
.IR var .
Note that this might be unsafe on certain systems, namely where
users can use the \fBps\fP command to see the environment of a process
owner by another user. On most modern systems, however, such behavior
of \fBps\fP is disabled and the \fB-E\fP option should be safe there.
Also, as an added security measure, \fB@NAME@\fP erases the keyword
from its environment immediately after reading it.
.TP
.B -f, --force
Overwrite existing files without asking any questions. Also, override 
\fB@NAME@\fP's reluctance to write or read encrypted data to or from a
terminal. 
.TP
.B -m, --mismatch
Normally, \fB@NAME@\fP refuses to decrypt data with a key that does
not seem to match. The \fB-m\fP option overrides this restriction. This
can sometimes be useful in recovering data from a corrupted file (see
RECOVERING DATA FROM CORRUPTED FILES). To avoid irretrievable loss
of data when decrypting with a wrong key, this option can only be used
when running as a filter or in cat mode.
.TP
.B -h, --help
Help. Print usage information and exit.
.TP
.B -k \fIfile\fP, --keyfile \fIfile\fP
Read the keyword as the first line from the named file. In keychange
mode, two keywords are read as the first two lines of the file. The
filename "-" may be given for reading keywords from standard input.
Using the \fB-k -\fP option and sending the keyword on stdin is
probably the safest way to pass a keyword to \fB@NAME@\fP from another
program or script.
.TP
.B -K \fIkey\fP, --key \fIkey\fP
Specify the keyword on the command line. This is unsafe, because any
other user can see the command line by running the \fBps\fP command.
Only use this option for testing purposes, and never with a real
keyword.
.TP
.B -l, --symlinks
Force encryption/decryption of symbolic links. By default, symbolic
links are ignored except in cat mode. Note that with the \fB-l\fP
option, encryption/decryption of a symbolic link causes the 
suffix \fB@SUF@\fP to be added/removed from the name of the link, not the
name of the file pointed to.
.TP
.B -L, --license
Print license info and exit.
.TP
.B -P \fIprompt\fP, --prompt \fIprompt\fP
Use \fIprompt\fP instead of the default prompt "Enter
encryption/decryption key: ".  This may be useful in some shell scripts.
.TP
.B -q, --quiet
Suppress most warnings.
.TP
.B -t, --timid
This option causes ccrypt to prompt twice for any encryption keys that
would be used to update a file destructively. If the two entered keys
are not identical, ccrypt will not proceed. This is a safeguard
against accidentally destroying data by encrypting it with a mistyped
key. When used with one of the \fB-E\fP, \fB-K\fP, or \fB-k\fP
options, this has no effect.
.TP
.B -r, --recursive
Traverse subdirectories recursively.
.TP
.B -R, --rec-symlinks
Traverse subdirectories recursively, and also follow symbolic links to
subdirectories.
.TP
.B -S \fI.suf\fP, --suffix \fI.suf\fP
Use the suffix \fI.suf\fP instead of the default suffix \fB@SUF@\fP.
.TP
.B -v, --verbose
Print progress information to stderr.
.TP
.B -V, --version
Print version info and exit.
.TP
.B --
End of options. Any remaining arguments are interpreted as filenames.
This also turns off filter mode, even if zero filenames follow. This
might be useful in the context of shell pattern expansion;
\fB@NAME@ -- *\fP will behave correctly even if no files match the
pattern \fB*\fP.
.PD
.SH NOTES ON USAGE

The user interface of \fB@NAME@\fP intentionally resembles that of GNU
\fBgzip\fP, although it is not identical. When invoked with filename
arguments, \fB@NAME@\fP normally modifies the files in place,
overwriting their old content. Unlike \fBgzip\fP, the output is not
first written to a temporary file; instead, the data is literally
overwritten. For encryption, this is usually the desired behavior,
since one does not want copies of the unencrypted data to remain in
hidden places in the file system. The disadvantage is that if
\fB@NAME@\fP is interrupted in the middle of writing to a file, the
file will end up in a corrupted, partially encrypted state.  However,
in such cases it is possible to recover most of the data; see
RECOVERING DATA FROM CORRUPTED FILES below.

When \fB@NAME@\fP receives an interrupt signal (Ctrl-C) while updating
a file in place, it does not exit immediately, but rather delays the
exit until after it finishes writing to the current file. This is to
prevent files from being partially overwritten and thus corrupted. If
you want to force \fB@NAME@\fP to exit immediately, just press Ctrl-C
twice quickly.

The encryption algorithm used by \fB@NAME@\fP uses a random seed which
is different each time. As a result, encrypting the same file twice
will never yield the same result. The advantage of this method is that
similarities in plaintext do not lead to similarities in ciphertext;
there is no way of telling whether the content of two encrypted files
is similar or not.

Because of the use of a random seed, decrypting and re-encrypting a
file with the same key will not lead to an identical file. It is
primarily for this reason that \fB@NAME@\fP refuses to decrypt files
with a non-matching key; if this were allowed, there would be no way
afterwards to restore the original file, and the data would be
irretrievably lost.

When overwriting files, special care is taken with hard links and
symbolic links. Each physical file (i.e., each inode) is processed at
most once, no matter how many paths to it are encountered on the
command line or in subdirectories traversed recursively. For each file
which has multiple hard links, a warning is printed, to alert the user
that not all paths to the file might have been properly renamed.
Symbolic links are ignored except in cat mode, or unless the \fB-l\fP
or \fB-R\fP option is given.

Unlike \fBgzip\fP, \fB@NAME@\fP does not complain about files that
have improper suffixes. It is legal to doubly encrypt a file. It is
also legal to decrypt a file which does not have the \fB@SUF@\fP
suffix, provided the file contains valid data for the given decryption
key.

Regarding encryption and compression: encrypted data is statistically
indistinguishable from random data, and thus it cannot be
compressed. But of course it is possible to compress the data first,
then encrypt it. Suggested file suffixes are \fB.gz.cpt\fP 
or \fB.gzc\fP.
.SH RECOVERING DATA FROM CORRUPTED FILES

Encrypted data might be corrupted for a number of reasons. For
instance, a file might have been partially encrypted or decrypted if
\fB@NAME@\fP was interrupted while processing the file. Or data might
be corrupted by software or hardware error, or during transmission
over a network. The encryption algorithm used by \fB@NAME@\fP is
designed to allow recovery from errors. In general, only a few bytes
of data will be lost near where the error occurred.

Data encrypted by \fB@NAME@\fP can be thought of as a sequence of
32-byte blocks. To decrypt a particular block, \fB@NAME@\fP only needs
to know the decryption key, the data of the block itself, and the data
of the block immediately preceding it. \fB@NAME@\fP cannot tell
whether a block is corrupted or not, except the very first block,
which is special. Thus, if the encrypted data has been altered in the
middle or near the end of a file, \fB@NAME@\fP can be run to decrypt
it as usual, and most of the data will be decrypted correctly, except
near where the corruption occurred.

The very first block of encrypted data is special, because it does not
actually correspond to any plaintext data; this block holds the random
seed generated at encryption time. \fB@NAME@\fP also uses the very
first block to decide whether the given keyword matches the data or
not. If the first block has been corrupted, \fB@NAME@\fP will likely
decide that the keyword does not match; in such cases, the \fB-m\fP
option can be used to force \fB@NAME@\fP to decrypt the data anyway.

If a file contains some encrypted and some unencrypted data, or data
encrypted with two different keys, one should decrypt the entire file
with each applicable key, and then piece together the meaningful parts
manually.

Finally, decryption will only produce meaningful results if the data
is aligned correctly along block boundaries. If the block boundary
information has been lost, one has to try all 32 possibilities.
.SH DESCRIPTION OF THE CIPHER

\fIBlock ciphers\fP operate on data segments of a fixed length.  For
instance, the Rijndael block cipher, also known as the
U.S. government's Advanced Encryption Standard (AES, see
http://www.nist.gov/aes/), has a block length of 32 bytes or 256
bits. Thus, the Rijndael block cipher encryptes 32 bytes at a time.

\fIStream ciphers\fP operate on data streams of any length. There are
several standard modes for operating a block cipher as a stream
cipher. One such standard is \fICipher Feedback (CFB)\fP, defined in
FIPS 81 and ANSI X3.106-1983. \fB@NAME@\fP implements a stream cipher
by operating the Rijndael block cipher in CFB mode.

Let \fIP[i]\fP and \fIC[i]\fP be the \fIi\fPth block of
the plaintext and ciphertext, respectively. CFB mode specifies that 
.IP
.nf
.I C[i] = P[i] ^ E(k,C[i-1])
.fi
.LP
Here \fI^\fP denotes the bitwise exclusive or function, and
\fIE(k,x)\fP denotes the encryption of the block \fIx\fP under the key
\fIk\fP using the block cipher. Thus, each block of the ciphertext is
calculated from the corresponding block of plaintext and the previous
block of ciphertext. Note that in fact, each byte of \fIP[i]\fP can
be calculated from the corresponding byte of \fIC[i]\fP, so that the
stream cipher can be applied one byte at a time. In particular, the
stream length need not be a multiple of the block size.

Assuming that blocks are numbered starting from \fI0\fP, a special
"initial" ciphertext block \fIC[-1]\fP is needed to provide the base
case for the above formula. This value \fIC[-1]\fP is called the
\fIinitialization vector\fP or \fIseed\fP. The seed is chosen at
encryption time and written as the first block of the encrypted
stream. It is important never to use the same seed more than once;
otherwise, the two resulting \fIC[0]\fP could be related by a simple
xor to obtain information about the corresponding \fIP[0]\fP.  If the
same seed is never reused, CFB is provably as secure as the underlying
block cipher.

In \fB@NAME@\fP, the seed is constructed as follows: first, a
combination of the host name, current time, process id, and an
internal counter are hashed into a 28-byte value, using a
cryptographic hash function. A fixed four-byte "magic number" is
combined with this value, and the resulting 32-byte value is encrypted
by one round of the Rijndael block cipher with the given key. The
result is used as the seed and appended to the beginning of the
ciphertext. The use of the magic number allows \fB@NAME@\fP to detect
non-matching keys before decryption.  
.SH SECURITY

\fB@NAME@\fP is believed to provide very strong cryptographic
\fIsecrecy\fP, essentially equivalent to that of Rijndael. This means,
without knowledge of the encryption key, it is effectively impossible
to obtain any information about the plaintext from a given
ciphertext. This is true even if a large number of
plaintext-ciphertext pairs are already known for this key. Moreover,
because \fB@NAME@\fP uses a key size of 256 bits, an exhaustive search
of the key space is not feasible, at least as long as sufficiently
long keys are actually used in practice. No cipher is secure if users
choose insecure keywords.

On the other hand, \fB@NAME@\fP does not attempt to provide \fIdata
integrity\fP, i.e., it will not detect whether the ciphertext was
modified after encryption. In particular, encrypted data can be
truncated, leaving the corresponding decrypted data also truncated,
but otherwise consistent. If one needs to insure data integrity as
well as secrecy, this can be achieved by other methods. The
recommended method is to prepend a cryptographic hash (for instance,
an MD5 or SHA-1 hash) to the data before encryption.

\fB@NAME@\fP does not claim to provide any particular safeguards
against information leaking via the local operating system. While
reasonable precautions are taken, there is no guarantee that
keywords and plaintexts have been physically erased after encryption
in completed; parts of such data might still exist in memory or on
disk. \fB@NAME@\fP does not currently use priviledged memory pages.

When encrypting files, \fB@NAME@\fP accesses them in read-write
mode. This normally causes the original file to be physically
overwritten, but on some file systems, this might not be the case.

Note that the use of the \fB-K\fP option is unsafe in a multiuser
environment, because the command line of a process is visible to other
users running the \fBps\fP command. The use of the \fB-E\fP option is
potentially unsafe for the same reason, although recent versions of
\fBps\fP don't tend to display environment information to other users.
.SH EMACS PACKAGE

There is an emacs package for reading and writing encrypted files.
This package hooks into the low-level file I/O functions of emacs,
prompting the user for a password where appropriate. It is implemented
in much the same way as support for compressed files; in fact, the
package, whose name is jka-compr-ccrypt, is based directly on the
jka-compr package which is part of GNU Emacs. It handles both
encrypted and compressed files (although currently not encrypted
compressed files).

To use the package, simply load jka-compr-ccrypt and edit as usual.
When you open a file with the ".cpt" extension, emacs will prompt you
for a password for the file. It will remember the password for the
buffer, and when you save the file later, it will be automatically
encrypted again (provided you save it with a ".cpt" extension). Except
for the password prompt, the operation of the package should be
transparent to the user. The package also handles compressed ".gz",
".bz2", and ".Z" files, and it should be used instead of, not in
addition to, jka-compr. The command M-x ccrypt-set-buffer-password can
be used to change the current password of a buffer.

The simplest way to use this package is to include the lines
.IP
.nf
 (setq load-path (cons "\fIpath\fP" load-path))
 (require 'jka-compr-ccrypt "jka-compr-ccrypt.el")
.fi
.LP
in your .emacs file, where \fIpath\fP is the directory which holds the
file jka-compr-ccrypt.el.

Limitations of the emacs package: there is no guarantee that
unencrypted information cannot leak to the file system; in fact, the
package sometimes writes unencrypted data to temporary files. However,
auto-saved files are normally treated correctly (i.e., encrypted).
For details, see the comments in the file jka-compr-ccrypt.el.
.SH EXIT STATUS

The exit status is 0 on successful completion, and non-zero otherwise.
An exit status of 1 means illegal command line, 2 is out of memory, 3
is an i/o error, 4 is a non-matching key, 5 is wrong file format, 6 is
interrupt. Return values 4 and 5 only occur when running as a filter;
when reading files, the respective conditions only generate a warning.
.SH BUGS

While \fB@NAME@\fP can handle keywords of arbitrary length, some
operating systems limit the length of an input line to 1024
characters.
.SH VERSION

@VERSION@
.SH AUTHOR

Peter Selinger <selinger at users.sourceforge.net>
.SH COPYRIGHT

Copyright (C) 2000-2001 Peter Selinger

This program is free software; you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation; either version 2 of the License, or
(at your option) any later version.

This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA 02111-1307,
USA. See also http://www.gnu.org/.
